import random
import pygame
import sys
from pygame.locals import *
from math import sin, cos, pi
import numpy as np
from numpy.linalg import inv
import pyautogui
from tkinter import *


def calculateComplementary(color):
    return (255 - color[0], 255 - color[1], 255 - color[2])


def G(y,t):
	angle1d, angle2d = y[0], y[1]
	angle1, angle2 = y[2], y[3]

	mass11, mass12 = (mass1 + mass2) * length1, mass2 * length2 * cos(angle1 - angle2)
	mass21, mass22 = length1 * cos(angle1 - angle2), length2
	m = np.array([[mass11, mass12],[mass21, mass22]])

	f1 = -mass2 * length2 * angle2d * angle2d * sin(angle1 - angle2) - (mass1 + mass2) * g * sin(angle1)
	f2 = length1 * angle1d * angle1d * sin(angle1 - angle2) - g * sin(angle2)
	f = np.array([f1, f2])

	accel = inv(m).dot(f)

	return np.array([accel[0], accel[1], angle1d, angle2d])


def timeStep(y, t, dt):
	k1 = G(y,t)
	k2 = G(y + 0.5 * k1 * dt, t + 0.5 * dt)
	k3 = G(y + 0.5 * k2 * dt, t + 0.5 * dt)
	k4 = G(y + k3 * dt, t + dt)

	return dt * (k1 + 2 * k2 + 2 * k3 + k4) / 6


def update(angle1, angle2):
    scale = 100
    x1 = length1 * scale * sin(angle1) + offset[0]
    y1 = length1 * scale * cos(angle1) + offset[1]

    x2 = x1 + length2 * scale * sin(angle2)
    y2 = y1 + length2 * scale * cos(angle2)

    return (x1, y1), (x2, y2)


def render(point1, point2, color1, color2):
    x1, y1 = int(point1[0]), int(point1[1])
    x2, y2 = int(point2[0]), int(point2[1])

    screen.fill(GRAY)
    factor = 25
    sizeLine = 3
    lengthLine1 = 30
    lengthLine2 = 5
    R1, G1, B1 = color2[0], color2[1], color2[2]
    R2, G2, B2 = color1[0], color1[1], color1[2]
    list.append([x2, y2, [R1, G1, B1]])
    list2.append([x1, y1, [R2, G2, B2]])
    # GRAY = (45, 45, 45)
    # delta = 45, 40, 195
    for item in list:
        if (item[2][0], item[2][1], item[2][2]) == (45, 45, 45):
            list.remove(item)
        chance = random.randint(0, lengthLine1)
        if chance == 0:
            if item[2][0] > 45:
                item[2][0] -= round(R1/factor, 2)
            else:
                item[2][0] = 45
            if item[2][1] > 45:
                item[2][1] -= round(G1/factor, 2)
            else:
                item[2][1] = 45
            if item[2][2] > 45:
                item[2][2] -= round(B1/factor, 2)
            else:
                item[2][2] = 45
        # pygame.draw.circle(screen, (item[2][0], item[2][1], item[2][2]), (item[0], item[1]), sizeLine)


    for item in list2:
        if (item[2][0], item[2][1], item[2][2]) == (45, 45, 45):
            list2.remove(item)
        chance = random.randint(0, lengthLine2)
        if chance == 0:
            if item[2][0] > 45:
                item[2][0] -= round(R2//factor, 2)
            else:
                item[2][0] = 45
            if item[2][1] > 45:
                item[2][1] -= round(G2//factor, 2)
                # print(round(G2/factor, 2))
            else:
                item[2][1] = 45
            if item[2][2] > 45:
                item[2][2] -= round(B2//factor, 2)
            else:
                item[2][2] = 45

        # pygame.draw.circle(screen, (item[2][0], item[2][1], item[2][2]), (item[0], item[1]), sizeLine)

    scale = 10
    pygame.draw.line(screen, WHITE, offset, (x1, y1), weight)
    pygame.draw.line(screen, WHITE, (x1, y1), (x2, y2), weight)
    pygame.draw.circle(screen, WHITE, offset, 8)
    pygame.draw.circle(screen, color1, (x1, y1), int(mass1 * scale))
    pygame.draw.circle(screen, color2, (x2, y2), int(mass2 * scale))

def getInput():
    length1 = float(pyautogui.prompt("Select the length of the first rod (1-3)"))
    length2 = float(pyautogui.prompt("Select the length of the second rod (1-3)"))
    mass1 = float(pyautogui.prompt("Select the mass of the first bob (0.5-4)"))
    mass2 = float(pyautogui.prompt("Select the mass of the second bob (0.5-4)"))
    input = [length1, length2, mass1, mass2]
    return input


width, height = 1400, 1000

# colors
WHITE = (110, 110, 110)
BLACK = (0, 0, 0)
GRAY = (45, 45, 45)
RED = (250, 100, 100)
BLUE = (90, 85, 242)
LIME = (150, 220, 100)
ORANGE = (255, 165, 90)
PURPLE = (190, 90, 255)
YELLOW = (235, 255, 100)
MINT = (90, 255, 190)
SWAMP = (92, 163, 111)
MAGENTA = (177, 75, 136)
offset = (width // 2, 350)
weight = 5
list = []
list2 = []

# pygame setup
screen = pygame.display.set_mode((width, height))
screen.fill(GRAY)
pygame.display.update()
clock = pygame.time.Clock()





length1, length2 = 1.5, 1.6
parameters = getInput()
length1, length2, mass1, mass2 = parameters[0], parameters[1], parameters[2], parameters[3]

# angle1, angle2 = 0.0, 0.0
g = 9.81
t = 0.1
deltaT = 0.01

angV1 = random.randint(-5, 5)
angV2 = random.randint(-5, 5)
thetangle1 = random.randint(1, 7)
thetangle2 = random.randint(0, 7)


y = np.array([angV1, angV2, thetangle1, thetangle2])



listColor = [BLUE, RED, PURPLE, ORANGE, LIME, YELLOW, MINT, SWAMP, MAGENTA]
color1 = random.choice(listColor)
listColor.remove(color1)
# color2 = random.choice(listColor)
color2 = calculateComplementary(color1)


run = True
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
    point1, point2 = update(y[2], y[3])
    render(point1, point2, color1, color2)
    t += deltaT
    # deltaT += 0.001
    y = y + timeStep(y, t, deltaT)
    clock.tick(60)
    pygame.display.update()
